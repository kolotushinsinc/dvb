import { useState, useEffect, useCallback, useMemo } from 'react';
import { api } from '@/lib/api';
import { Product, Category } from '@/types/product';

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
let productsCache: Product[] | null = null;
let isLoading = false;

interface UseProductsOptions {
  category?: string;
  search?: string;
  isBrandNew?: boolean;
  isOnSale?: boolean;
  limit?: number;
  sort?: string;
  sortOrder?: string;
}

export const useProducts = (options: UseProductsOptions = {}) => {
  const [products, setProducts] = useState<Product[]>(productsCache || []);
  const [loading, setLoading] = useState(!productsCache);
  const [error, setError] = useState<string | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
  const loadProducts = useCallback(async () => {
    // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (productsCache && !options.category && !options.search) {
      setProducts(productsCache);
      setLoading(false);
      return;
    }

    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
    if (isLoading) {
      return;
    }

    isLoading = true;
    try {
      setLoading(true);
      setError(null);

      const response = await api.products.getAll(options);

      let allProducts: Product[] = [];
      
      // –ü—Ä–∏–≤–æ–¥–∏–º response –∫ —Ç–∏–ø—É any –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
      const responseAny = response as any;

      console.log('üîç Processing response format:', {
        hasData: !!responseAny?.data,
        dataIsArray: Array.isArray(responseAny?.data),
        hasSuccess: responseAny?.success,
        hasProducts: !!responseAny?.products,
        productsIsArray: Array.isArray(responseAny?.products),
        isDirectArray: Array.isArray(responseAny)
      });

      // –§–æ—Ä–º–∞—Ç –∏–∑ api.products.getAll: { data: [...], summary: {...} }
      if (responseAny && responseAny.data && Array.isArray(responseAny.data)) {
        allProducts = responseAny.data;
        console.log('‚úÖ Using direct data format, count:', allProducts.length);
      }
      // –§–æ—Ä–º–∞—Ç 1: { success: true, data: { products: [...], pagination: {...} } }
      else if (responseAny &&
          responseAny.success === true &&
          responseAny.data &&
          responseAny.data.products &&
          Array.isArray(responseAny.data.products)) {
        allProducts = responseAny.data.products;
        console.log('‚úÖ Using nested data.products format, count:', allProducts.length);
      }
      // –§–æ—Ä–º–∞—Ç 2: { products: [...], pagination: {...} }
      else if (responseAny &&
               responseAny.products &&
               Array.isArray(responseAny.products)) {
        allProducts = responseAny.products;
        console.log('‚úÖ Using direct products format, count:', allProducts.length);
      }
      // –§–æ—Ä–º–∞—Ç 3: { data: [...] }
      else if (responseAny &&
               responseAny.data &&
               Array.isArray(responseAny.data)) {
        allProducts = responseAny.data;
        console.log('‚úÖ Using direct data array format, count:', allProducts.length);
      }
      // –§–æ—Ä–º–∞—Ç 4: –ü—Ä—è–º–æ–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
      else if (Array.isArray(responseAny)) {
        allProducts = responseAny;
        console.log('‚úÖ Using direct array format, count:', allProducts.length);
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (!options.category && !options.search) {
        productsCache = allProducts;
      }

      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      if (allProducts.length === 0) {
        console.warn(`üö® No products found`);
      }

      setProducts(allProducts);
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã');
      console.error('Load error:', err);
    } finally {
      setLoading(false);
      isLoading = false;
    }
  }, [options.category, options.search]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–ø—Ü–∏–π

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø—Ü–∏–π
  useEffect(() => {
    console.log('üîß PRODUCTS HOOK - Component mounted or options changed, calling loadProducts');
    loadProducts();
  }, [loadProducts]); // –ò—Å–ø–æ–ª—å–∑—É–µ–º loadProducts –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ)
  const refreshProducts = useCallback(() => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if (!options.category && !options.search) {
      productsCache = null;
    }
    loadProducts();
  }, [loadProducts]); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç options, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤

  return { products, loading, error, refreshProducts };
};

// –•—É–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
export const useFilteredProducts = (
  products: Product[],
  categories: Category[],
  filters: {
    priceRange: [number, number];
    selectedCategories: string[];
    selectedFilters: Record<string, string[]>;
    selectedCountries: string[];
  }
) => {
  const filteredProducts = useMemo(() => {
    console.log('üîç FILTER DEBUG - Starting filter:', {
      totalProducts: products.length,
      selectedCategories: filters.selectedCategories,
      priceRange: filters.priceRange
    });

    return products.filter(product => {
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ
      const priceMatch = product.price >= filters.priceRange[0] &&
                        product.price <= filters.priceRange[1];

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      let categoryMatch = true;
      if (filters.selectedCategories.length > 0) {
        if (product.categoryId && product.categoryId._id) {
          categoryMatch = filters.selectedCategories.includes(product.categoryId._id);
        } else if (product.category && product.category._id) {
          categoryMatch = filters.selectedCategories.includes(product.category._id);
        } else {
          categoryMatch = false;
        }
      }
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
      const countryMatch = filters.selectedCountries.length === 0 ||
                          (product.country && filters.selectedCountries.includes(product.country));

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º —Ç–æ–≤–∞—Ä–∞
      let attributesMatch = true;
      if (Object.keys(filters.selectedFilters).length > 0 && product.attributes) {
        for (const [key, values] of Object.entries(filters.selectedFilters)) {
          if (values.length > 0) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º any –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
            const productValue = (product.attributes as any)[key];
            if (Array.isArray(productValue)) {
              // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—Ä–µ–Ω–¥–∞)
              attributesMatch = attributesMatch && values.some(v => productValue.includes(v));
            } else if (typeof productValue === 'string') {
              // –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
              attributesMatch = attributesMatch && values.includes(productValue);
            } else if (typeof productValue === 'number') {
              // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑–º–µ—Ä)
              attributesMatch = attributesMatch && values.includes(productValue.toString());
            }
          }
        }
      }

      return priceMatch && categoryMatch && countryMatch && attributesMatch;
    });
  }, [products, filters]);

  return filteredProducts;
};
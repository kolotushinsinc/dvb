# Nginx configuration for CORS support
# Add this to your server block in /etc/nginx/sites-available/your-domain

server {
    listen 443 ssl http2;
    server_name api.dvberry.ru;
    
    # SSL configuration
    ssl_certificate /path/to/your/certificate.crt;
    ssl_certificate_key /path/to/your/private.key;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # CORS headers - dynamically set based on origin
    set $cors_origin "";
    if ($http_origin ~* "^https://dvberry\.ru$") {
        set $cors_origin "https://dvberry.ru";
    }
    if ($http_origin ~* "^https://crm\.dvberry\.ru$") {
        set $cors_origin "https://crm.dvberry.ru";
    }
    
    add_header 'Access-Control-Allow-Origin' $cors_origin always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Origin, X-Requested-With, Accept, X-HTTP-Method-Override, X-CSRF-Token' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Range, X-Content-Range' always;
    add_header 'Access-Control-Max-Age' 86400 always; # 24 hours
    
    # Handle preflight requests
    location ~* "^/api/.*" {
        # Dynamically set CORS origin based on request origin
        set $cors_origin "";
        if ($http_origin ~* "^https://dvberry\.ru$") {
            set $cors_origin "https://dvberry.ru";
        }
        if ($http_origin ~* "^https://crm\.dvberry\.ru$") {
            set $cors_origin "https://crm.dvberry.ru";
        }
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $cors_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Origin, X-Requested-With, Accept, X-HTTP-Method-Override, X-CSRF-Token';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Expose-Headers' 'Content-Range, X-Content-Range';
            add_header 'Access-Control-Max-Age' 86400;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # Proxy to Node.js server
        proxy_pass http://localhost:5001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }
    
    # Static files
    location /uploads/ {
        alias /path/to/your/server/uploads/;
        expires 1d;
        add_header Cache-Control "public, immutable";
        
        # Dynamically set CORS origin based on request origin
        set $cors_origin "";
        if ($http_origin ~* "^https://dvberry\.ru$") {
            set $cors_origin "https://dvberry.ru";
        }
        if ($http_origin ~* "^https://crm\.dvberry\.ru$") {
            set $cors_origin "https://crm.dvberry.ru";
        }
        
        add_header 'Access-Control-Allow-Origin' $cors_origin;
        add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Origin, X-Requested-With, Accept';
    }
    
    # Default location
    location / {
        proxy_pass http://localhost:5001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}

# HTTP redirect to HTTPS
server {
    listen 80;
    server_name api.dvberry.ru;
    return 301 https://$host$request_uri;
}